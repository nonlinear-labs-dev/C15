#include "PresetUseCases.h"
#include <presets/Preset.h>
#include <libundo/undo/Scope.h>
#include <nltools/Assert.h>

PresetUseCases::PresetUseCases(Preset* preset)
    : PresetUseCases(std::vector<Preset*> { preset })
{
}

PresetUseCases::PresetUseCases(std::vector<Preset*> presets)
    : m_presets(presets)
{
}

void PresetUseCases::rename(const std::string& newName)
{
  if(!m_presets.empty())
  {
    std::unique_ptr<UNDO::TransactionCreationScope> scope;

    for(auto p : m_presets)
    {
      if(p->getName() != newName)
      {
        if(!scope)
          scope = m_presets.front()->getUndoScope().startTransaction("Rename preset");

        p->setName(scope->getTransaction(), newName);
      }
    }
  }
}

void PresetUseCases::setComment(const Glib::ustring& comment)
{
  if(!m_presets.empty())
  {
    std::unique_ptr<UNDO::TransactionCreationScope> scope;

    for(auto p : m_presets)
    {
      if(p->getComment() != comment)
      {
        if(!scope)
          scope = m_presets.front()->getUndoScope().startTransaction("Rename preset");

        p->setAttribute(scope->getTransaction(), "Comment", comment);
      }
    }
  }
}

void PresetUseCases::setAttribute(const Glib::ustring& key, const Glib::ustring& value)
{
  if(!m_presets.empty())
  {
    auto scope = m_presets.front()->getUndoScope().startTransaction("Set Preset attribute");
    auto transaction = scope->getTransaction();
    for(auto p : m_presets)
    {
      p->setAttribute(transaction, key, value);
      p->setAutoGeneratedAttributes(transaction);
    }
  }
}
