#pragma once

#include "ParameterGroupSet.h"
#include <libundo/undo/Scope.h>
#include "tools/Uuid.h"
#include <tools/BackgroundJobs.h>
#include "http/UpdateDocumentContributor.h"
#include "PresetSettings.h"
#include "AttributesOwner.h"
#include "PresetManager.h"

class Writer;
class PresetBank;
class SearchQuery;
class PresetManager;

class Preset : public ParameterGroupSet, public AttributesOwner
{
 private:
  typedef ParameterGroupSet super;

 public:
  static shared_ptr<Preset> createPreset(UpdateDocumentContributor *parent);
  virtual ~Preset();

  void setAutoGeneratedAttributes(UNDO::Scope::tTransactionPtr transaction);

  void load(UNDO::Scope::tTransactionPtr transaction, RefPtr<Gio::File> bankPath);
  void loadAsync(RefPtr<Gio::File> presetPath);
  bool save(RefPtr<Gio::File> presetPath);
  void undoableSelect(UNDO::Scope::tTransactionPtr transaction);
  void undoableSetName(const ustring &name);
  void undoableSetName(UNDO::Scope::tTransactionPtr transaction, const ustring &name);
  void undoableSetUuid(UNDO::Scope::tTransactionPtr transaction, const Uuid &uuid);
  void undoableSetType(UNDO::Scope::tTransactionPtr transaction, PresetType newtype);

  void setName(const ustring &name);
  ustring getName() const;

  void setUuid(const Uuid &uuid);
  const Uuid &getUuid() const;

  shared_ptr<const PresetBank> getBank() const;
  shared_ptr<PresetBank> getBank();

  virtual void copyFrom(UNDO::Scope::tTransactionPtr transaction, Preset *other, bool ignoreUUIDs);
  void guessName(UNDO::Scope::tTransactionPtr transaction);

  bool matchesQuery(const SearchQuery &query) const;

  // CALLBACKS
  sigc::connection onPresetChanged(slot<void> s);

  void writeDocument(Writer &writer, tUpdateID knownRevision) const override;
  void writeDiff(Writer &writer, Preset *other) const;

  UpdateDocumentContributor::tUpdateID onChange(uint64_t flags
                                                = UpdateDocumentContributor::ChangeFlags::Generic) override;

  PresetSettings &getSettings();
  const PresetSettings &getSettings() const;

  bool hasDuplicateName() const;
  size_t getHash() const;
  Glib::ustring getUndoTransactionTitle(const Glib::ustring &prefix) const;
  void onLoadStatusChanged();

 protected:
  Preset(UpdateDocumentContributor *parent);

 private:
  void updateBankChangeTime();

  ustring m_name;
  Uuid m_uuid;
  PresetSettings m_settings;

  Signal<void> m_signalPresetChanged;
  tUpdateID m_lastSavedUpdateID = 0;

  PresetType m_type = PresetType::Single;

  friend class PresetSerializer;
  friend class AttributesOwnerSerializer;
  friend class PresetBank;
};
